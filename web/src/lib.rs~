use std::thread;

struct Worker {
    id: usize,
    thread: thread::JoinHandler<()>,
}

impl Worker {
    fn new(id: usize) -> thread::JoinHandler<()> {
	let t = thread::spawn(|| {});
	Worker {
	    id: id,
	    thread: t,
	}
    }
}

pub struct ThreadPool {
    workers: Vec<Worker>,
}

impl ThreadPool {
    pub fn new(size: usize) -> ThreadPool {
	assert!(size > 0);

	let mut workers = Vec::with_capacity(size);
	for id in 0..size {
	    workers.push(Worker::new(id))
	}

	ThreadPool {workers}
    }

    pub fn execute<F: FnOnce() + Send + 'static>(&self, f: F) {
    }
}
