use web::ThreadPool;
use std::net::TcpListener;
use std::net::TcpStream;
use std::thread;
use std::fs;
use std::time::Duration;
use std::io::{Read, Write};

fn main() {
    println!("Hello, world!");
    let listener = TcpListener::bind("0.0.0.0:7878").unwrap();
    let pool = ThreadPool::new(4);

    for stream in listener.incoming() {
        let stream = stream.unwrap();

	pool.execute(|| {
            handle_connection(stream);
        });
    }
}

fn handle_connection(mut stream: TcpStream) {
    let mut buffer = [0; 1024];
    stream.read(&mut buffer).unwrap();

    let mut headers = [httparse::EMPTY_HEADER; 64];
    let mut req = httparse::Request::new(&mut headers);

    // let buf = b"GET /index.html HTTP/1.1\r\nHost";
    // assert!(req.parse(buf)?.is_partial());

    // // a partial request, so we try again once we have more data
    // let buf = b"GET /index.html HTTP/1.1\r\nHost: example.domain\r\n\r\n";
    // assert!(req.parse(buf)?.is_complete());

    let mut sz: usize = 0;
    match req.parse(&buffer) {
	Ok(status) => {
	    if status.is_partial() {
		println!("todo: handle http parse partial {}", status);
		return
	    }
	    sz = status.unwrap();
	},
	Err(e) => {
	    println!("parse http error {}", e);
	    return
	},
    }

    println!("read head == {}", buffer[..sz]);

    let get = b"GET / HTTP/1.1\r\n";
    let sleep = b"GET /sleep HTTP/1.1\r\n";

    // let (status_line, filename) = if buffer[:sz] {
    // let (status_line, filename) = if buffer.starts_with(get) {
    //     ("HTTP/1.1 200 OK", "hello.html")
    // } else if buffer.starts_with(sleep) {
    //     thread::sleep(Duration::from_secs(5));
    //     ("HTTP/1.1 200 OK", "hello.html")
    // } else {
    //     ("HTTP/1.1 404 NOT FOUND", "404.html")
    // };
    let (status_line, filename) = ("HTTP/1.1 404 NOT FOUND", "404.html");

    let contents = fs::read_to_string(filename).unwrap();

    let response = format!(
        "{}\r\nContent-Length: {}\r\n\r\n{}",
        status_line,
        contents.len(),
        contents
    );

    stream.write_all(response.as_bytes()).unwrap();
    stream.flush().unwrap();
}
